import logging
import asyncio
from aiohttp import web
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from dotenv import load_dotenv
import os
import nest_asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 417731116

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
QUESTION, ORDER = range(2)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
questions = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ —Ç–æ–≤–∞—Ä—ã", "–î–æ—Å—Ç–∞–≤–∫–∞"],
        ["–ù–∞—à –∞–¥—Ä–µ—Å", "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"],
        ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?"]
    ], resize_keyboard=True)

# –ú–µ–Ω—é "–ù–∞–∑–∞–¥"
back_menu = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∞–º–∞
BAD_PATTERNS = ["http", "https", "www.", ".net", ".xyz", ".click", ".ru", "free", "claim", "airdrop", "eth"]

# –ê–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä - —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏/—Å–ª–æ–≤–∞–º–∏
async def anti_spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return
    text = update.message.text.lower()
    if any(pattern in text for pattern in BAD_PATTERNS):
        try:
            await update.message.delete()
            await update.message.reply_text("üö´ –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{update.message.from_user.username}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∞–º–∞: {e}")
        return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
    user_first_name = update.effective_user.first_name
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}! \n–í–∞—à user_id: {user_id}. \n–†–∞–¥—ã, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∏ —Ç–æ–≤–∞—Ä—ã":
        await update.message.reply_text(
            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ü–µ–Ω–∞—Ö –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ: [t.me/fruitstorya](https://t.me/fruitstorya)""",
            reply_markup=back_menu
        )
    elif text == "–î–æ—Å—Ç–∞–≤–∫–∞":
        await update.message.reply_text(
            "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "–î–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏ —Ñ—Ä—É–∫—Ç—ã –æ—Ç 40 –¥–æ 100 —Ä—É–±–ª–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20 –∫–º –æ—Ç –Ω–∞—à–µ–π —Ç–æ—á–∫–∏!",
            reply_markup=back_menu
        )
    elif text == "–ù–∞—à –∞–¥—Ä–µ—Å":
        await update.message.reply_text(
            "–ù–∞—à –∞–¥—Ä–µ—Å: –õ–æ–≥–æ–π—Å–∫–∞—è, —É–ª–∏—Ü–∞ 5–ê, –í–∞–ª–µ—Ä—å—è–Ω–æ–≤–æ, –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            reply_markup=back_menu
        )
    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º:")
        return QUESTION
    elif text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑, –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å:")
        return ORDER
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=main_menu_keyboard())

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø–∞–º—è—Ç–∏
    questions[user.id] = {
        "name": user.full_name,
        "question": message
    }

    # –õ–æ–≥–∏—Ä—É–µ–º user_id –¥–ª—è –∞–¥–º–∏–Ω–∞
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} (ID: {user.id}): {message}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ –Ω–∏–∫–∞'}):\n\n{message}\n\nuser_id: {user.id}"
    )
    
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ –Ω–∏–∫–∞'}):\n\n{message}"
    )
    
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.effective_user.id != ADMIN_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /answer <user_id> <–æ—Ç–≤–µ—Ç>")
        return

    user_id = int(context.args[0])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    answer_text = " ".join(context.args[1:])  # –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in questions:
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(
        chat_id=user_id,
        text=f"–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {answer_text}"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
    await update.message.reply_text(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    del questions[user_id]

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async def handle(request):
    return web.Response(text="OK")

async def start_http_server():
    app = web.Application()
    app.router.add_get('/', handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    print("HTTP server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    question_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\?$"), handle_message)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    order_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑$"), handle_message)],
        states={
            ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(question_conv)
    app.add_handler(order_conv)

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, anti_spam))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    app.add_handler(CommandHandler("answer", answer))

    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(start_http_server())

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç polling...")
    app.run_polling()

if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º nest_asyncio –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
    nest_asyncio.apply()
    main()
